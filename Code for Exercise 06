import math
import pylab as pl
class cannon_shell:
    def __init__(self, x_0, y_0, initial_velocity, theta_0, \
                 time_step, total_time):
        self.theta = theta_0
        self.x = [x_0]
        self.y = [y_0]
        self.v_x = [math.cos(theta_0 * math.pi / 180) * initial_velocity]
        self.v_y = [math.sin(theta_0 * math.pi / 180) * initial_velocity]
        self.g = 9.8
        self.dt = time_step
        self.time = total_time
        self.v = initial_velocity
    def run(self):
          while 1:
            self.x.append(self.x[-1] + self.dt * self.v_x[-1])
            self.y.append(self.y[-1] + self.dt * self.v_y[-1])
            self.v_x.append(self.v_x[-1]-(1-0.0065*self.y[-1]/288)**2.5*0.00004\
            *(self.v_x[-1]**2+self.v_y[-1]**2)**0.5*self.v_x[-1]*self.dt)
            self.v_y.append(self.v_y[-1] - self.g * self.dt-(1-0.0065*self.y[-1]/288)**2.5*0.00004\
            *(self.v_x[-1]**2+self.v_y[-1]**2)**0.5*self.v_y[-1]*self.dt)
            if len(self.y)>2 and self.y[-1]<-2000 and self.y[-2]>=-2000:
                break    
          print '初速度为',(self.v),"m/s时打击目标的距离：", (self.x[-1]), 'm'
          print '初速度为',(self.v),"m/s时打击目标的高度：", (self.y[-1]), 'm'
    def show_results(self):
        font = {'family': 'serif',
                'color':  'black',
                'weight': 'normal',
                'size': 16,
        }
        pl.plot(self.x, self.y)
        pl.title('Trajectory of cannon shell', fontdict = font)
        pl.ylim(-2000, 12000)
        pl.xlabel('x ($m$)', {'size':12,'color':'black'})
        pl.ylabel('y ($m$)', {'size':12,'color':'black'})
        pl.text(self.x[3000], self.y[3000],\
                str(self.v) +'m/s', fontdict = font)
        pl.text(22000, 11000,\
                'Same Velocity Angle', {'size':12,'color':'red'})
a = cannon_shell(0 , 0, 600, 45, 0.01, 1500)
a.run()
a.show_results()
a = cannon_shell(0 , 0, 700, 45, 0.01, 1500)
a.run()
a.show_results()
a = cannon_shell(0 , 0, 800, 45, 0.01, 1500)
a.run()
a.show_results()
pl.show()
