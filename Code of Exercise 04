import pylab as pl
import numpy as np
class resonance:
    na = input('number_A = ')
    nb = input('number_B = ')
    tau = input('time_constant = ')
    td = input('time_of_duration = ')
    tp = input('time_step = ')
    def __init__(self, number_A = na, number_B = nb, time_constant = tau, time_of_duration = td, time_step = tp):
        #unit of time is second
        self.n_A = [number_A]
        self.n_B = [number_B]
        self.init_na = number_A
        self.init_nb = number_B
        self.t = [0]
        self.tau = time_constant
        self.dt = time_step
        self.time = time_of_duration
        self.nsteps = int(time_of_duration // time_step + 1)
        self.sum = number_A + number_B
        print("Initial number of nuclei_A ->", number_A)
        print("Initial number of nuclei_B ->", number_B)
        print("Time constant ->", time_constant)
        print("time step -> ", time_step)
        print("total time -> ", time_of_duration)
    def calculate(self):
        for i in range(self.nsteps):
            tmp_A = self.n_A[i] + (self.sum/self.tau - 2*self.n_A[i]/self.tau)*self.dt
            tmp_B = self.n_B[i] + (self.sum/self.tau - 2*self.n_B[i]/self.tau)*self.dt
            self.n_A.append(tmp_A)
            self.n_B.append(tmp_B)
            self.t.append(self.t[i] + self.dt)
    def show_results(self):
        pl.plot(self.t, self.n_A, 'b', label = "$N_{A}$")
        pl.plot(self.t, self.n_B, 'r', label = "$N_{B}$")
        pl.xlabel('time ($s$)')
        pl.ylabel('Number of Nuclei')
        x = np.linspace(0, self.time, self.nsteps)  
        na_analytic = (self.init_na + self.init_nb) / 2 + 0.5 * (self.init_na - self.init_nb) * np.exp(-2 / self.tau * x)
        nb_analytic = (self.init_na + self.init_nb) / 2 - 0.5 * (self.init_na - self.init_nb) * np.exp(-2 / self.tau * x)
        pl.plot(x, na_analytic, 'b--', label = "theoretical value of $N_{A}$")
        pl.plot(x, nb_analytic, 'r--', label = "theoretical value of $N_{A}$")
        pl.legend()
        pl.show()
a = resonance()
a.calculate()
a.show_results()
